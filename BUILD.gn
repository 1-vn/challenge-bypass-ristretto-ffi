# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//brave/build/cargo.gni")

challenge_bypass_build_path = "$root_gen_dir/challenge_bypass_ristretto/out"

challenge_bypass_lib_path = challenge_bypass_build_path

challenge_bypass_platform = ""

# See https://forge.rust-lang.org/platform-support.html for platform support
if (is_win) {
  if (target_cpu == "x86") {
    challenge_bypass_lib_path += "/i686-pc-windows-msvc"
    challenge_bypass_platform = "Windows x86"
  } else if (target_cpu == "x64") {
    challenge_bypass_lib_path += "/x86_64-pc-windows-msvc"
    challenge_bypass_platform = "Windows x64"
  }
} else if (is_mac) {
  if (target_cpu == "x64") {
    challenge_bypass_lib_path += "/x86_64-apple-darwin"
    challenge_bypass_platform = "macOS x64"
  }
} else if (is_linux) {
  if (target_cpu == "x64") {
    challenge_bypass_lib_path += "/x86_64-unknown-linux-gnu"
    challenge_bypass_platform = "Linux x64"
  }
} else if (is_android) {
  if (target_cpu == "arm") {
    challenge_bypass_lib_path += "/arm-linux-androideabi"
    challenge_bypass_platform = "Android arm"
  } else if (target_cpu == "arm64") {
    challenge_bypass_lib_path += "/aarch64-linux-android"
    challenge_bypass_platform = "Android arm64"
  } else if (target_cpu == "x86") {
    challenge_bypass_lib_path += "/i686-linux-android"
    challenge_bypass_platform = "Android x86"
  } else if (target_cpu == "x64") {
    challenge_bypass_lib_path += "/x86_64-linux-android"
    challenge_bypass_platform = "Android x64"
  }
} else if (is_ios) {
  if (target_cpu == "arm64") {
    challenge_bypass_lib_path += "/aarch64-apple-ios"
  } else if (target_cpu == "x64") {
    challenge_bypass_lib_path += "/x86_64-apple-ios"
  }

  challenge_bypass_platform = "iOS"
}

if (is_debug) {
  challenge_bypass_lib_path += "/debug"
} else {
  challenge_bypass_lib_path += "/release"
}

if (is_win) {
  challenge_bypass_lib_path += "/challenge_bypass_ristretto.lib"
} else if (is_mac || is_ios || is_linux || is_android) {
  challenge_bypass_lib_path += "/libchallenge_bypass_ristretto.a"
}

config("external_config") {
  include_dirs = [ "src" ]
  libs = [ challenge_bypass_lib_path ]
}

cargo_build("challenge_bypass_ristretto_ffi") {
  public_configs = [ ":external_config" ]

  inputs = [
    "build.rs",
    "Cargo.toml",
    "src/lib.h",
    "src/lib.rs",
    "src/wrapper.cpp",
    "src/wrapper.hpp"
  ]

  output = challenge_bypass_lib_path

  manifest_path = "Cargo.toml"

  build_path = challenge_bypass_build_path
  
  platform = challenge_bypass_platform
}
